//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PLForms.BLServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BLServiceReference.BlServiceContract")]
    public interface BlServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertClient", ReplyAction="http://tempuri.org/BlServiceContract/InsertClientResponse")]
        bool InsertClient(BE.Client c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertClient", ReplyAction="http://tempuri.org/BlServiceContract/InsertClientResponse")]
        System.Threading.Tasks.Task<bool> InsertClientAsync(BE.Client c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertCar", ReplyAction="http://tempuri.org/BlServiceContract/InsertCarResponse")]
        bool InsertCar(BE.Car c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertCar", ReplyAction="http://tempuri.org/BlServiceContract/InsertCarResponse")]
        System.Threading.Tasks.Task<bool> InsertCarAsync(BE.Car c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertRenting", ReplyAction="http://tempuri.org/BlServiceContract/InsertRentingResponse")]
        bool InsertRenting(BE.Renting r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertRenting", ReplyAction="http://tempuri.org/BlServiceContract/InsertRentingResponse")]
        System.Threading.Tasks.Task<bool> InsertRentingAsync(BE.Renting r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertFault", ReplyAction="http://tempuri.org/BlServiceContract/InsertFaultResponse")]
        bool InsertFault(BE.Fault f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertFault", ReplyAction="http://tempuri.org/BlServiceContract/InsertFaultResponse")]
        System.Threading.Tasks.Task<bool> InsertFaultAsync(BE.Fault f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/InsertCar_FaultResponse")]
        bool InsertCar_Fault(BE.Car_Fault cf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/InsertCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/InsertCar_FaultResponse")]
        System.Threading.Tasks.Task<bool> InsertCar_FaultAsync(BE.Car_Fault cf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteClient", ReplyAction="http://tempuri.org/BlServiceContract/DeleteClientResponse")]
        bool DeleteClient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteClient", ReplyAction="http://tempuri.org/BlServiceContract/DeleteClientResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteCar", ReplyAction="http://tempuri.org/BlServiceContract/DeleteCarResponse")]
        bool DeleteCar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteCar", ReplyAction="http://tempuri.org/BlServiceContract/DeleteCarResponse")]
        System.Threading.Tasks.Task<bool> DeleteCarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteRenting", ReplyAction="http://tempuri.org/BlServiceContract/DeleteRentingResponse")]
        bool DeleteRenting(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteRenting", ReplyAction="http://tempuri.org/BlServiceContract/DeleteRentingResponse")]
        System.Threading.Tasks.Task<bool> DeleteRentingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteFault", ReplyAction="http://tempuri.org/BlServiceContract/DeleteFaultResponse")]
        bool DeleteFault(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteFault", ReplyAction="http://tempuri.org/BlServiceContract/DeleteFaultResponse")]
        System.Threading.Tasks.Task<bool> DeleteFaultAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/DeleteCar_FaultResponse")]
        bool DeleteCar_Fault(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/DeleteCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/DeleteCar_FaultResponse")]
        System.Threading.Tasks.Task<bool> DeleteCar_FaultAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateClient", ReplyAction="http://tempuri.org/BlServiceContract/UpdateClientResponse")]
        bool UpdateClient(BE.Client c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateClient", ReplyAction="http://tempuri.org/BlServiceContract/UpdateClientResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientAsync(BE.Client c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateCar", ReplyAction="http://tempuri.org/BlServiceContract/UpdateCarResponse")]
        bool UpdateCar(BE.Car c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateCar", ReplyAction="http://tempuri.org/BlServiceContract/UpdateCarResponse")]
        System.Threading.Tasks.Task<bool> UpdateCarAsync(BE.Car c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateRenting", ReplyAction="http://tempuri.org/BlServiceContract/UpdateRentingResponse")]
        bool UpdateRenting(BE.Renting r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateRenting", ReplyAction="http://tempuri.org/BlServiceContract/UpdateRentingResponse")]
        System.Threading.Tasks.Task<bool> UpdateRentingAsync(BE.Renting r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateFault", ReplyAction="http://tempuri.org/BlServiceContract/UpdateFaultResponse")]
        bool UpdateFault(BE.Fault f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateFault", ReplyAction="http://tempuri.org/BlServiceContract/UpdateFaultResponse")]
        System.Threading.Tasks.Task<bool> UpdateFaultAsync(BE.Fault f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/UpdateCar_FaultResponse")]
        bool UpdateCar_Fault(BE.Car_Fault cf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/UpdateCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/UpdateCar_FaultResponse")]
        System.Threading.Tasks.Task<bool> UpdateCar_FaultAsync(BE.Car_Fault cf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllClients", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllClientsResponse")]
        System.Collections.Generic.List<BE.Client> SelectAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllClients", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllClientsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Client>> SelectAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllCars", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllCarsResponse")]
        System.Collections.Generic.List<BE.Car> SelectAllCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllCars", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllCarsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Car>> SelectAllCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllRentings", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllRentingsResponse")]
        System.Collections.Generic.List<BE.Renting> SelectAllRentings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllRentings", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllRentingsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Renting>> SelectAllRentingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllFaults", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllFaultsResponse")]
        System.Collections.Generic.List<BE.Fault> SelectAllFaults();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllFaults", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllFaultsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Fault>> SelectAllFaultsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllCar_Faults", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllCar_FaultsResponse")]
        System.Collections.Generic.List<BE.Car_Fault> SelectAllCar_Faults();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectAllCar_Faults", ReplyAction="http://tempuri.org/BlServiceContract/SelectAllCar_FaultsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Car_Fault>> SelectAllCar_FaultsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectClient", ReplyAction="http://tempuri.org/BlServiceContract/SelectClientResponse")]
        BE.Client SelectClient(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectClient", ReplyAction="http://tempuri.org/BlServiceContract/SelectClientResponse")]
        System.Threading.Tasks.Task<BE.Client> SelectClientAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectCar", ReplyAction="http://tempuri.org/BlServiceContract/SelectCarResponse")]
        BE.Car SelectCar(int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectCar", ReplyAction="http://tempuri.org/BlServiceContract/SelectCarResponse")]
        System.Threading.Tasks.Task<BE.Car> SelectCarAsync(int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectRenting", ReplyAction="http://tempuri.org/BlServiceContract/SelectRentingResponse")]
        BE.Renting SelectRenting(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectRenting", ReplyAction="http://tempuri.org/BlServiceContract/SelectRentingResponse")]
        System.Threading.Tasks.Task<BE.Renting> SelectRentingAsync(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectFault", ReplyAction="http://tempuri.org/BlServiceContract/SelectFaultResponse")]
        BE.Fault SelectFault(int faultId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectFault", ReplyAction="http://tempuri.org/BlServiceContract/SelectFaultResponse")]
        System.Threading.Tasks.Task<BE.Fault> SelectFaultAsync(int faultId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/SelectCar_FaultResponse")]
        BE.Car_Fault SelectCar_Fault(int car_faultId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/SelectCar_Fault", ReplyAction="http://tempuri.org/BlServiceContract/SelectCar_FaultResponse")]
        System.Threading.Tasks.Task<BE.Car_Fault> SelectCar_FaultAsync(int car_faultId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/GetRentingForClient", ReplyAction="http://tempuri.org/BlServiceContract/GetRentingForClientResponse")]
        System.Collections.Generic.List<BE.Renting> GetRentingForClient(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/GetRentingForClient", ReplyAction="http://tempuri.org/BlServiceContract/GetRentingForClientResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Renting>> GetRentingForClientAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/ExpensesForClient", ReplyAction="http://tempuri.org/BlServiceContract/ExpensesForClientResponse")]
        double ExpensesForClient(int clientId, System.DateTime dateBegin, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/ExpensesForClient", ReplyAction="http://tempuri.org/BlServiceContract/ExpensesForClientResponse")]
        System.Threading.Tasks.Task<double> ExpensesForClientAsync(int clientId, System.DateTime dateBegin, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/EarningsForCar", ReplyAction="http://tempuri.org/BlServiceContract/EarningsForCarResponse")]
        double EarningsForCar(int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/EarningsForCar", ReplyAction="http://tempuri.org/BlServiceContract/EarningsForCarResponse")]
        System.Threading.Tasks.Task<double> EarningsForCarAsync(int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FaultsNamesOrderByFrequency", ReplyAction="http://tempuri.org/BlServiceContract/FaultsNamesOrderByFrequencyResponse")]
        System.Collections.Generic.List<string> FaultsNamesOrderByFrequency();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FaultsNamesOrderByFrequency", ReplyAction="http://tempuri.org/BlServiceContract/FaultsNamesOrderByFrequencyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> FaultsNamesOrderByFrequencyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FindRenting", ReplyAction="http://tempuri.org/BlServiceContract/FindRentingResponse")]
        System.Collections.Generic.List<BE.Client> FindRenting(System.Predicate<BE.Renting> match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FindRenting", ReplyAction="http://tempuri.org/BlServiceContract/FindRentingResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Client>> FindRentingAsync(System.Predicate<BE.Renting> match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/ThereWasFault", ReplyAction="http://tempuri.org/BlServiceContract/ThereWasFaultResponse")]
        bool ThereWasFault(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/ThereWasFault", ReplyAction="http://tempuri.org/BlServiceContract/ThereWasFaultResponse")]
        System.Threading.Tasks.Task<bool> ThereWasFaultAsync(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FinalRentingPrice", ReplyAction="http://tempuri.org/BlServiceContract/FinalRentingPriceResponse")]
        double FinalRentingPrice(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/FinalRentingPrice", ReplyAction="http://tempuri.org/BlServiceContract/FinalRentingPriceResponse")]
        System.Threading.Tasks.Task<double> FinalRentingPriceAsync(int rentingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/RentingEnding", ReplyAction="http://tempuri.org/BlServiceContract/RentingEndingResponse")]
        bool RentingEnding(int rentId, System.DateTime dateEnd, int ke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/RentingEnding", ReplyAction="http://tempuri.org/BlServiceContract/RentingEndingResponse")]
        System.Threading.Tasks.Task<bool> RentingEndingAsync(int rentId, System.DateTime dateEnd, int ke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/IsYoungDriver", ReplyAction="http://tempuri.org/BlServiceContract/IsYoungDriverResponse")]
        bool IsYoungDriver(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/IsYoungDriver", ReplyAction="http://tempuri.org/BlServiceContract/IsYoungDriverResponse")]
        System.Threading.Tasks.Task<bool> IsYoungDriverAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/IsNewDriver", ReplyAction="http://tempuri.org/BlServiceContract/IsNewDriverResponse")]
        bool IsNewDriver(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlServiceContract/IsNewDriver", ReplyAction="http://tempuri.org/BlServiceContract/IsNewDriverResponse")]
        System.Threading.Tasks.Task<bool> IsNewDriverAsync(int clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BlServiceContractChannel : PLForms.BLServiceReference.BlServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlServiceContractClient : System.ServiceModel.ClientBase<PLForms.BLServiceReference.BlServiceContract>, PLForms.BLServiceReference.BlServiceContract {
        
        public BlServiceContractClient() {
        }
        
        public BlServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BlServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertClient(BE.Client c) {
            return base.Channel.InsertClient(c);
        }
        
        public System.Threading.Tasks.Task<bool> InsertClientAsync(BE.Client c) {
            return base.Channel.InsertClientAsync(c);
        }
        
        public bool InsertCar(BE.Car c) {
            return base.Channel.InsertCar(c);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCarAsync(BE.Car c) {
            return base.Channel.InsertCarAsync(c);
        }
        
        public bool InsertRenting(BE.Renting r) {
            return base.Channel.InsertRenting(r);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRentingAsync(BE.Renting r) {
            return base.Channel.InsertRentingAsync(r);
        }
        
        public bool InsertFault(BE.Fault f) {
            return base.Channel.InsertFault(f);
        }
        
        public System.Threading.Tasks.Task<bool> InsertFaultAsync(BE.Fault f) {
            return base.Channel.InsertFaultAsync(f);
        }
        
        public bool InsertCar_Fault(BE.Car_Fault cf) {
            return base.Channel.InsertCar_Fault(cf);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCar_FaultAsync(BE.Car_Fault cf) {
            return base.Channel.InsertCar_FaultAsync(cf);
        }
        
        public bool DeleteClient(int id) {
            return base.Channel.DeleteClient(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientAsync(int id) {
            return base.Channel.DeleteClientAsync(id);
        }
        
        public bool DeleteCar(int id) {
            return base.Channel.DeleteCar(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCarAsync(int id) {
            return base.Channel.DeleteCarAsync(id);
        }
        
        public bool DeleteRenting(int id) {
            return base.Channel.DeleteRenting(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRentingAsync(int id) {
            return base.Channel.DeleteRentingAsync(id);
        }
        
        public bool DeleteFault(int id) {
            return base.Channel.DeleteFault(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFaultAsync(int id) {
            return base.Channel.DeleteFaultAsync(id);
        }
        
        public bool DeleteCar_Fault(int id) {
            return base.Channel.DeleteCar_Fault(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCar_FaultAsync(int id) {
            return base.Channel.DeleteCar_FaultAsync(id);
        }
        
        public bool UpdateClient(BE.Client c) {
            return base.Channel.UpdateClient(c);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientAsync(BE.Client c) {
            return base.Channel.UpdateClientAsync(c);
        }
        
        public bool UpdateCar(BE.Car c) {
            return base.Channel.UpdateCar(c);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCarAsync(BE.Car c) {
            return base.Channel.UpdateCarAsync(c);
        }
        
        public bool UpdateRenting(BE.Renting r) {
            return base.Channel.UpdateRenting(r);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRentingAsync(BE.Renting r) {
            return base.Channel.UpdateRentingAsync(r);
        }
        
        public bool UpdateFault(BE.Fault f) {
            return base.Channel.UpdateFault(f);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFaultAsync(BE.Fault f) {
            return base.Channel.UpdateFaultAsync(f);
        }
        
        public bool UpdateCar_Fault(BE.Car_Fault cf) {
            return base.Channel.UpdateCar_Fault(cf);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCar_FaultAsync(BE.Car_Fault cf) {
            return base.Channel.UpdateCar_FaultAsync(cf);
        }
        
        public System.Collections.Generic.List<BE.Client> SelectAllClients() {
            return base.Channel.SelectAllClients();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Client>> SelectAllClientsAsync() {
            return base.Channel.SelectAllClientsAsync();
        }
        
        public System.Collections.Generic.List<BE.Car> SelectAllCars() {
            return base.Channel.SelectAllCars();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Car>> SelectAllCarsAsync() {
            return base.Channel.SelectAllCarsAsync();
        }
        
        public System.Collections.Generic.List<BE.Renting> SelectAllRentings() {
            return base.Channel.SelectAllRentings();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Renting>> SelectAllRentingsAsync() {
            return base.Channel.SelectAllRentingsAsync();
        }
        
        public System.Collections.Generic.List<BE.Fault> SelectAllFaults() {
            return base.Channel.SelectAllFaults();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Fault>> SelectAllFaultsAsync() {
            return base.Channel.SelectAllFaultsAsync();
        }
        
        public System.Collections.Generic.List<BE.Car_Fault> SelectAllCar_Faults() {
            return base.Channel.SelectAllCar_Faults();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Car_Fault>> SelectAllCar_FaultsAsync() {
            return base.Channel.SelectAllCar_FaultsAsync();
        }
        
        public BE.Client SelectClient(int clientId) {
            return base.Channel.SelectClient(clientId);
        }
        
        public System.Threading.Tasks.Task<BE.Client> SelectClientAsync(int clientId) {
            return base.Channel.SelectClientAsync(clientId);
        }
        
        public BE.Car SelectCar(int carId) {
            return base.Channel.SelectCar(carId);
        }
        
        public System.Threading.Tasks.Task<BE.Car> SelectCarAsync(int carId) {
            return base.Channel.SelectCarAsync(carId);
        }
        
        public BE.Renting SelectRenting(int rentingId) {
            return base.Channel.SelectRenting(rentingId);
        }
        
        public System.Threading.Tasks.Task<BE.Renting> SelectRentingAsync(int rentingId) {
            return base.Channel.SelectRentingAsync(rentingId);
        }
        
        public BE.Fault SelectFault(int faultId) {
            return base.Channel.SelectFault(faultId);
        }
        
        public System.Threading.Tasks.Task<BE.Fault> SelectFaultAsync(int faultId) {
            return base.Channel.SelectFaultAsync(faultId);
        }
        
        public BE.Car_Fault SelectCar_Fault(int car_faultId) {
            return base.Channel.SelectCar_Fault(car_faultId);
        }
        
        public System.Threading.Tasks.Task<BE.Car_Fault> SelectCar_FaultAsync(int car_faultId) {
            return base.Channel.SelectCar_FaultAsync(car_faultId);
        }
        
        public System.Collections.Generic.List<BE.Renting> GetRentingForClient(int clientId) {
            return base.Channel.GetRentingForClient(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Renting>> GetRentingForClientAsync(int clientId) {
            return base.Channel.GetRentingForClientAsync(clientId);
        }
        
        public double ExpensesForClient(int clientId, System.DateTime dateBegin, System.DateTime dateEnd) {
            return base.Channel.ExpensesForClient(clientId, dateBegin, dateEnd);
        }
        
        public System.Threading.Tasks.Task<double> ExpensesForClientAsync(int clientId, System.DateTime dateBegin, System.DateTime dateEnd) {
            return base.Channel.ExpensesForClientAsync(clientId, dateBegin, dateEnd);
        }
        
        public double EarningsForCar(int carId) {
            return base.Channel.EarningsForCar(carId);
        }
        
        public System.Threading.Tasks.Task<double> EarningsForCarAsync(int carId) {
            return base.Channel.EarningsForCarAsync(carId);
        }
        
        public System.Collections.Generic.List<string> FaultsNamesOrderByFrequency() {
            return base.Channel.FaultsNamesOrderByFrequency();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> FaultsNamesOrderByFrequencyAsync() {
            return base.Channel.FaultsNamesOrderByFrequencyAsync();
        }
        
        public System.Collections.Generic.List<BE.Client> FindRenting(System.Predicate<BE.Renting> match) {
            return base.Channel.FindRenting(match);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BE.Client>> FindRentingAsync(System.Predicate<BE.Renting> match) {
            return base.Channel.FindRentingAsync(match);
        }
        
        public bool ThereWasFault(int rentingId) {
            return base.Channel.ThereWasFault(rentingId);
        }
        
        public System.Threading.Tasks.Task<bool> ThereWasFaultAsync(int rentingId) {
            return base.Channel.ThereWasFaultAsync(rentingId);
        }
        
        public double FinalRentingPrice(int rentingId) {
            return base.Channel.FinalRentingPrice(rentingId);
        }
        
        public System.Threading.Tasks.Task<double> FinalRentingPriceAsync(int rentingId) {
            return base.Channel.FinalRentingPriceAsync(rentingId);
        }
        
        public bool RentingEnding(int rentId, System.DateTime dateEnd, int ke) {
            return base.Channel.RentingEnding(rentId, dateEnd, ke);
        }
        
        public System.Threading.Tasks.Task<bool> RentingEndingAsync(int rentId, System.DateTime dateEnd, int ke) {
            return base.Channel.RentingEndingAsync(rentId, dateEnd, ke);
        }
        
        public bool IsYoungDriver(int clientId) {
            return base.Channel.IsYoungDriver(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> IsYoungDriverAsync(int clientId) {
            return base.Channel.IsYoungDriverAsync(clientId);
        }
        
        public bool IsNewDriver(int clientId) {
            return base.Channel.IsNewDriver(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> IsNewDriverAsync(int clientId) {
            return base.Channel.IsNewDriverAsync(clientId);
        }
    }
}
